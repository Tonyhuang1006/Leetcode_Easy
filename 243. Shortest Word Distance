Given an array of strings wordsDict and two different strings that already exist in the array word1 and word2, return the shortest distance between these two words in the list.

 

Example 1:

Input: wordsDict = ["practice", "makes", "perfect", "coding", "makes"], word1 = "coding", word2 = "practice"
Output: 3
Example 2:

Input: wordsDict = ["practice", "makes", "perfect", "coding", "makes"], word1 = "makes", word2 = "coding"
Output: 1
 

Constraints:

1 <= wordsDict.length <= 3 * 104
1 <= wordsDict[i].length <= 10
wordsDict[i] consists of lowercase English letters.
word1 and word2 are in wordsDict.
word1 != word2

Solution 1 (While Loop):

class Solution:
    def shortestDistance(self, wordsDict: List[str], word1: str, word2: str) -> int:
        dist = float("inf")
        i, index1, index2 = 0, None, None
        
        while i < len(wordsDict):
            if wordsDict[i] == word1:
                index1 = i
            elif wordsDict[i] == word2:
                index2 = i
            if index1 is not None and index2 is not None:
                dist = min(dist, abs(index1-index2))
                
            i += 1
        return dist
   
   Solution 2 (for Loop):
   
   def shortestDistance(dictlist, word1, word2):
    dist = len(dictlist)
    index1, index2 = None, None
    for i in range(len(dictlist)):
        if dictlist[i] == word1:
            index1 = i
        elif dictlist[i] == word2:
            index2 = i
        
        if index1 is not None and index2 is not None:
            dist = min(dist, abs(index1 - index2))
        
    return dist

     
